<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Download â€¢ <%= brandTitle %></title>
  <link rel="icon" href="/static/favicon.svg" type="image/svg+xml"/>
  <link rel="stylesheet" href="/static/styles.css"/>
  <% if (brandPrimary) { %><style>:root{ --primary:<%= brandPrimary %>; }</style><% } %>
	<style>
	  /* ChatGPT-like code block */
	  .gpt-code{
		background:#7789B0;          /* slate-900 */
		border:1px solid #1f2a44;     /* faint border */
		border-radius:12px;
		overflow:hidden;
		box-shadow:0 6px 16px rgba(0,0,0,.25);
	  }
	  .gpt-code .gpt-head{
		display:flex;align-items:center;justify-content:space-between;
		padding:8px 10px;
		background:#111827;           /* slightly lighter header */
		color:#cbd5e1;
		border-bottom:1px solid #1f2937;
		font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;
		font-size:12px;
	  }
	  .gpt-code .badge{
		background:#1f2937;           /* slate-800 */
		color:#93c5fd;                /* light blue label */
		border:1px solid #334155;     /* slate-700 */
		padding:2px 8px;
		border-radius:6px;
		font-weight:700;
	  }
	  .gpt-code .copy{
		background:transparent;
		border:1px solid #334155;
		color:#cbd5e1;
		border-radius:8px;
		padding:4px 8px;
		cursor:pointer;
	  }
	  .gpt-code .copy:hover{ background:#1f2937; }
	  .gpt-code pre{
		margin:0; padding:12px 14px;
		color:#e5e7eb;
		max-height:180px;             /* vertical scroll inside card */
		overflow:auto;                /* vertical + horizontal if needed */
	  }
	  .gpt-code code{
		white-space:pre-wrap;         /* wraps long bits but keeps formatting */
		word-break:break-word;
		font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;
		font-size:13px;
	  }

	  /* keep your layout wrapper for vertical stacking */
	  .code-col{ display:flex; flex-direction:column; gap:12px; margin-top:12px; }
	</style>
</head>
<body>
  <div class="container">
    <div class="card" style="max-width: 720px; text-align:center;">
      <h2 style="margin-top:0">File Is Ready To Download</h2>
      <div class="panel">
        <div style="margin-bottom:6px"><strong><%= fileName %></strong></div>
        <div class="file-meta" id="filesize"></div>

        <!-- Only Copy + Share + Close -->
		<div clss="inline-actions" style="margin:10px 0 8px">
		  <button class="btn btn-blue" id="btnCopy"  type="button">Copy</button>
		  <button class="btn btn-blue" id="btnShare" type="button">Share</button>
		  <button class="btn btn-muted" id="btnClose" type="button">Close</button>
		</div>

        <!-- One box per row (Windows, Linux), vertically stacked -->
		<div class="code-col">
		  <div class="gpt-code">
			<div class="gpt-head">
			  <span class="badge">Windows</span>
			  <button class="copy" id="copyWin" type="button">Copy</button>
			</div>
			<pre><code id="cmdWin"></code></pre>
		  </div>

		  <div class="gpt-code">
			<div class="gpt-head">
			  <span class="badge">Linux</span>
			  <button class="copy" id="copyNix" type="button">Copy</button>
			</div>
			<pre><code id="cmdNix"></code></pre>
		  </div>
		</div>        
      </div>
      <div class="footer"><b><%= footerText %></b></div>
    </div>
  </div>

<script>
function toast(msg, type='info', ms=7000){
  let wrap = document.querySelector('.toast-wrap');
  if(!wrap){ wrap=document.createElement('div'); wrap.className='toast-wrap'; document.body.appendChild(wrap); }
  const t=document.createElement('div'); t.className='toast '+(type==='ok'?'ok':type==='err'?'err':'info'); t.textContent=msg;
  wrap.appendChild(t);
  setTimeout(()=>{ t.style.opacity='0'; t.style.transform='translateY(-4px)'; }, Math.max(2600, ms-600));
  setTimeout(()=>{ try{ wrap.removeChild(t); }catch{} }, ms);
}

const fileName = <%- JSON.stringify(fileName) %>;
const fileSize = Number(<%- JSON.stringify(typeof fileSize === 'number' ? fileSize : 0) %>);
const dlUrl = location.origin + "/dl/<%= token %>";

// Show size just under filename (MB if > 500 KB else KB)
(function(){
  const kb = Math.round(fileSize/1024);
  const txt = kb > 500 ? (fileSize/1048576).toFixed(2) + ' MB' : kb + ' KB';
  document.getElementById('filesize').textContent = txt;
})();

// Build commands
const safeName = fileName.replace(/"/g, '\\"'); // escape any quotes in the name
const cmdWin = `Invoke-WebRequest -Uri ${JSON.stringify(dlUrl)} -OutFile ".\\${safeName}"`;
const cmdNix = 'wget -O ' + JSON.stringify(fileName) + ' ' + JSON.stringify(dlUrl);

// Put in DOM
document.getElementById('cmdWin').textContent = cmdWin;
document.getElementById('cmdNix').textContent = cmdNix;

// Copy buttons
document.getElementById('copyWin').onclick = ()=> navigator.clipboard.writeText(cmdWin).then(()=>toast('Windows Command Copied', 'ok', 8000));
document.getElementById('copyNix').onclick = ()=> navigator.clipboard.writeText(cmdNix).then(()=>toast('Linux Command Copied', 'ok', 8000));

// Copy direct link
document.getElementById('btnCopy').onclick = async () => {
  try {
    await navigator.clipboard.writeText(dlUrl);
    toast(`Download Link Copied for ${fileName}`, 'ok', 7000);
  } catch {
    toast('Failed to copy link', 'err', 7000);
  }
};

// Share (Web Share API) with fallback to copy
document.getElementById('btnShare').onclick = async ()=>{
  if (navigator.share){
    try{
      await navigator.share({ title: fileName, text: fileName, url: dlUrl });
      toast('Share sheet opened', 'info', 6000);
    }catch(e){ /* user canceled */ }
  } else {
    await navigator.clipboard.writeText(dlUrl);
    toast('Link copied (share not supported)', 'ok', 7000);
  }
};

// Close
document.getElementById('btnClose').onclick = ()=>{
  window.close();
  setTimeout(()=>{
    if (!window.closed){
      if (history.length > 1) history.back();
      else location.href = '/';
    }
  }, 100);
};
</script>
</body>
</html>