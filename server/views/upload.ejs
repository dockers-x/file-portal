<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Upload • <%= brandTitle %></title>
  <link rel="stylesheet" href="/static/styles.css"/>
  <% if (brandPrimary) { %><style>:root{ --primary:<%= brandPrimary %>; }</style><% } %>
  <style>
    .upload-grid{ display:grid; grid-template-columns: 1fr 1fr; gap:18px; }
    @media (max-width: 860px){ .upload-grid{ grid-template-columns: 1fr; } }
    .queue-item{ background:#fff; border:1px solid #eef0f5; border-radius:12px; padding:10px 12px; margin:10px 0; }
    .queue-h{ display:flex; align-items:center; justify-content:space-between; gap:10px; }
    .queue-name{ font-weight:600; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; max-width: 260px; }
    .queue-meta{ font-size:12px; color:#6b7280; }
    .q-actions{ display:flex; gap:8px; }
    .x{ cursor:pointer; color:#b91c1c; }
    .bar{ height:10px; background:#e5e7eb; border-radius:8px; overflow:hidden; margin-top:8px; }
    .bar > div{ height:100%; width:0%; background: linear-gradient(90deg,#60a5fa,#93c5fd); transition: width 0.1s linear; }
    .two-btns{ display:flex; gap:10px; }
    .ghost{ opacity:.5; pointer-events:none; }
  </style>
</head>
<body>
  <div class="container">
    <div class="card" style="max-width: 980px; position: relative;">
      <div style="display:flex; align-items:center; justify-content:space-between; margin-bottom:10px">
        <h2 style="margin:0">Upload Files</h2>
        <button id="btnDone" class="btn btn-primary" onclick="location.href='/dashboard'">Done</button>
      </div>

      <div class="upload-grid">
        <div class="panel">
          <h3 style="margin-top:0">File Upload</h3>
          <div id="zone" class="dropzone" style="margin-top:8px">
            <p style="margin:0 0 4px 0">Drag and Drop Files</p>
            <p class="small" style="margin:0">Or</p>
            <div style="margin-top:8px">
              <button id="btnBrowse" class="btn btn-blue">Browse</button>
              <input id="picker" type="file" multiple style="display:none"/>
            </div>
          </div>
          <div style="margin-top:12px">
            <label class="small" for="comments">Comments (optional)</label>
            <textarea id="comments" placeholder="Optional comments" style="width:100%; min-height:80px; padding:10px; border:1px solid #d1d5db; border-radius:10px"></textarea>
          </div>
        </div>

        <div class="panel">
          <h3 style="margin-top:0">Uploading</h3>
          <div id="queue"></div>
          <div class="two-btns" style="margin-top:10px">
            <button id="btnStart" class="btn btn-primary">Upload</button>
            <button id="btnCancel" class="btn btn-muted">Cancel</button>
          </div>
          <div id="hint" class="small" style="margin-top:8px; color:#6b7280">Queued files will upload when you click <b>Upload</b>.</div>
        </div>
      </div>

      <div class="footer"><b><%= footerText %></b></div>
    </div>
  </div>

<script>
const zone = document.getElementById('zone');
const picker = document.getElementById('picker');
const btnBrowse = document.getElementById('btnBrowse');
const btnStart = document.getElementById('btnStart');
const btnCancel = document.getElementById('btnCancel');
const queue = document.getElementById('queue');
const commentsEl = document.getElementById('comments');

let q = []; // {file, el, lastT, lastLoaded, xhr, fileId}
let uploading = false;

btnBrowse.onclick = () => picker.click();
picker.onchange = () => addFiles(Array.from(picker.files));

zone.ondragover = (e)=>{ e.preventDefault(); zone.style.filter='brightness(1.05)'; };
zone.ondragleave = ()=>{ zone.style.filter=''; };
zone.ondrop = (e)=>{ e.preventDefault(); zone.style.filter=''; addFiles(Array.from(e.dataTransfer.files)); };

function human(n){ const u=['B','KB','MB','GB','TB']; let i=0,v=n; while(v>=1024 && i<u.length-1){ v/=1024; i++; } return (Math.round(v*10)/10)+' '+u[i]; }

function addFiles(files){
  for (const file of files){
    const row = document.createElement('div');
    row.className='queue-item';
    row.innerHTML = `
      <div class="queue-h">
        <div class="queue-name" title="${file.name}">${file.name}</div>
        <div class="q-actions">
          <span class="queue-meta">${human(file.size)}</span>
          <span class="x" title="Remove from queue">×</span>
        </div>
      </div>
      <div class="bar"><div></div></div>
      <div class="queue-meta"><span class="pct">0%</span> • <span class="spd">0 KB/s</span></div>
      <div class="q-links" style="margin-top:6px; display:none; gap:6px">
        <button class="btn btn-muted small copylink">Copy Link</button>
      </div>`;
    const obj = { file, el: row, lastT: Date.now(), lastLoaded:0, xhr:null, fileId:null };
    row.querySelector('.x').onclick = ()=>{ if (uploading) return; q = q.filter(e => e !== obj); queue.removeChild(row); };
    queue.appendChild(row);
    q.push(obj);
  }
}

btnCancel.onclick = ()=>{
  if (!uploading){ q=[]; queue.innerHTML=''; return; }
  const cur = q.find(x=>x.xhr); if (cur && cur.xhr) cur.xhr.abort();
};

btnStart.onclick = async ()=>{
  if (uploading || !q.length) return;
  uploading = true; setDisabled(true);
  for (const item of q){
    const fd = new FormData();
    fd.append('files', item.file);
    fd.append('comments', commentsEl.value || '');

    const xhr = new XMLHttpRequest(); item.xhr = xhr;
    const bar = item.el.querySelector('.bar > div');
    const pct = item.el.querySelector('.pct');
    const spd = item.el.querySelector('.spd');
    const links = item.el.querySelector('.q-links');
    const copyBtn = item.el.querySelector('.copylink');

    xhr.open('POST','/api/upload', true);
    xhr.upload.onprogress = (e)=>{
      if (e.lengthComputable){
        const percent = Math.round((e.loaded/e.total)*100);
        bar.style.width = percent + '%'; pct.textContent = percent + '%';
        const now = Date.now(), dt = (now - item.lastT)/1000;
        if (dt > 0.2){ const speed = (e.loaded - item.lastLoaded) / dt; spd.textContent = human(speed) + '/s'; item.lastT = now; item.lastLoaded = e.loaded; }
      }
    };
    await new Promise((resolve)=>{
      xhr.onreadystatechange = async ()=>{
        if (xhr.readyState===4){
          item.xhr = null;
          if (xhr.status>=200 && xhr.status<300){
            try{
              const j = JSON.parse(xhr.responseText);
              if (j.ok && j.saved && j.saved.length){
                item.fileId = j.saved[0].id;
                links.style.display='flex';
                copyBtn.onclick = async ()=>{
                  const r = await fetch('/api/getlink',{ method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ id: item.fileId })});
                  const g = await r.json();
                  if (g.ok){ await navigator.clipboard.writeText(g.directUrl); alert('Direct link copied!'); }
                };
              }
            }catch{}
          } else { spd.textContent = 'failed'; }
          resolve(true);
        }
      };
      xhr.send(fd);
    });
  }
  uploading = false; setDisabled(false);
};

function setDisabled(d){
  btnBrowse.disabled = d; btnStart.disabled = d; picker.disabled = d;
  btnCancel.textContent = d ? 'Cancel (active)' : 'Cancel';
  if (d) queue.classList.add('ghost'); else queue.classList.remove('ghost');
}
</script>
</body>
</html>
