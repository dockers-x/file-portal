<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Upload • <%= brandTitle %></title>
  <link rel="icon" href="/static/favicon.svg" type="image/svg+xml"/>
  <link rel="stylesheet" href="/static/styles.css"/>
  <% if (brandPrimary) { %><style>:root{ --primary:<%= brandPrimary %>; }</style><% } %>
  <style>
    .upload-grid{ display:grid; grid-template-columns: 1fr 1fr; gap:18px; }
    @media (max-width: 860px){ .upload-grid{ grid-template-columns: 1fr; } }
    .queue-item{ background:#fff; border:1px solid #eef0f5; border-radius:12px; padding:10px 12px; margin:10px 0; }
    .queue-h{ display:flex; align-items:center; justify-content:space-between; gap:10px; }
    .queue-name{ font-weight:600; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; max-width: 260px; }
    .queue-meta{ font-size:12px; color:#6b7280; }
    .q-actions{ display:flex; gap:8px; }
    .x{ cursor:pointer; color:#b91c1c; }
    .bar{ height:10px; background:#e5e7eb; border-radius:8px; overflow:hidden; margin-top:8px; }
    .bar > div{ height:100%; width:0%; background: linear-gradient(90deg,#60a5fa,#93c5fd); transition: width 0.1s linear; }
    .two-btns{ display:flex; gap:10px; }
    .ghost{ opacity:.5; pointer-events:none; }
  </style>
</head>
<body data-upl-conc="<%= uploadConcurrency %>">
  <div class="topbar">
    <div class="topbar-inner">
      <div class="topbar-title">
        <% if (brandLogo) { %><img src="<%= brandLogo %>" alt="logo"/><% } %>
        <span><%= brandTitle %></span>
      </div>
      <div>
        <a href="/logout"><button class="btn btn-signout small-compact">Sign Out</button></a>
      </div>
    </div>
  </div>

  <div class="container">
    <div class="card" style="max-width: 980px; position: relative;">
      <div style="display:flex; align-items:center; justify-content:space-between; margin-bottom:10px">
        <h2 style="margin:0">Upload Files</h2>
        <button id="btnDone" class="btn btn-primary" type="button">Done</button>
      </div>

      <div class="upload-grid">
        <div class="panel">
          <h3 style="margin-top:0">File Upload</h3>
          <div id="zone" class="dropzone" style="margin-top:8px">
            <p style="margin:0 0 4px 0">Drag and Drop Files</p>
            <p class="small" style="margin:0">Or</p>
            <div style="margin-top:8px">
              <button id="btnBrowse" class="btn btn-blue" type="button">Browse</button>
              <input id="picker" type="file" multiple style="display:none"/>
            </div>
          </div>
          <div style="margin-top:12px">
            <label class="small" for="comments">Comments (optional)</label>
            <textarea id="comments" placeholder="Optional comments" style="width:100%; min-height:80px; padding:10px; border:1px solid #d1d5db; border-radius:10px"></textarea>
          </div>
        </div>

        <div class="panel">
          <h3 style="margin-top:0">Uploading</h3>
          <div id="queue"></div>
          <div class="two-btns" style="margin-top:10px">
            <button id="btnStart" class="btn btn-primary" style="display:none">Upload</button>
            <button id="btnCancel" class="btn btn-muted" disabled>Cancel</button>
          </div>
          <div id="hint" class="small" style="margin-top:8px; color:#6b7280">Uploads begin as soon as you add files.</div>
        </div>
      </div>

      <div class="footer"><b><%= footerText %></b></div>
    </div>
  </div>

<script>
function toast(msg, type='info', ms=7000){
  let wrap = document.querySelector('.toast-wrap');
  if(!wrap){ wrap=document.createElement('div'); wrap.className='toast-wrap'; document.body.appendChild(wrap); }
  const t=document.createElement('div'); t.className='toast '+(type==='ok'?'ok':type==='err'?'err':'info'); t.textContent=msg;
  wrap.appendChild(t);
  setTimeout(()=>{ t.style.opacity='0'; t.style.transform='translateY(-4px)'; }, Math.max(2600, ms-600));
  setTimeout(()=>{ try{ wrap.removeChild(t); }catch{} }, ms);
}

const zone = document.getElementById('zone');
const picker = document.getElementById('picker');
const btnBrowse = document.getElementById('btnBrowse');
const btnCancel = document.getElementById('btnCancel');
const btnDone = document.getElementById('btnDone');
const queue = document.getElementById('queue');
const commentsEl = document.getElementById('comments');

btnDone.addEventListener('click', ()=>{ if (btnDone.disabled) return; window.location.assign('/dashboard'); });

const workerCode = () => {
  self.onmessage = async (e)=>{
    const file = e.data;
    try{
      const buf = await file.arrayBuffer();
      const hashBuf = await crypto.subtle.digest('SHA-256', buf);
      const hashArr = Array.from(new Uint8Array(hashBuf)).map(b=>b.toString(16).padStart(2,'0')).join('');
      self.postMessage({ok:true, hash: hashArr});
    }catch(err){ self.postMessage({ok:false}); }
  };
};
const workerBlob = new Blob([ '(' + workerCode.toString() + ')()' ], { type: 'application/javascript' });
const hasher = new Worker(URL.createObjectURL(workerBlob));
function hashFile(file){ return new Promise(res=>{ const onm = (ev)=>{ res(ev.data.ok ? ev.data.hash : null); hasher.removeEventListener('message', onm); }; hasher.addEventListener('message', onm); hasher.postMessage(file); }); }

let q = [];
let active = new Set();
let uploading = false;
const uploadedNames = new Set();
const uploadedHashes = new Set();
const CONC = Number(document.body.dataset.uplConc || 3);

btnBrowse.onclick = () => picker.click();
picker.onchange = () => addFiles(Array.from(picker.files));

zone.ondragover = (e)=>{ e.preventDefault(); zone.style.filter='brightness(1.05)'; };
zone.ondragleave = ()=>{ zone.style.filter=''; };
zone.ondrop = (e)=>{ e.preventDefault(); zone.style.filter=''; addFiles(Array.from(e.dataTransfer.files)); };

function human(n){ const u=['B','KB','MB','GB','TB']; let i=0,v=n; while(v>=1024 && i<u.length-1){ v/=1024; i++; } return (Math.round(v*10)/10)+' '+u[i]; }

async function addFiles(files){
  for (const file of files){
    if (uploadedNames.has(file.name)) { toast('Skipped (already uploaded by name): ' + file.name, 'info', 7000); continue; }
    const h = await hashFile(file);
    if (h && uploadedHashes.has(h)) { toast('Skipped (already uploaded by content): ' + file.name, 'info', 7000); continue; }

    const row = document.createElement('div');
    row.className='queue-item';
    row.innerHTML = `
      <div class="queue-h">
        <div class="queue-name" title="${file.name}">${file.name}</div>
        <div class="q-actions">
          <span class="queue-meta">${human(file.size)}</span>
          <span class="x" title="Remove from queue">×</span>
        </div>
      </div>
      <div class="bar"><div></div></div>
      <div class="queue-meta"><span class="pct">0%</span> • <span class="spd">0 KB/s</span></div>
      <div class="q-links" style="margin-top:6px; display:none; gap:6px">
        <button class="btn btn-muted small copylink">Copy Link</button>
      </div>`;
    const obj = { file, el: row, lastT: Date.now(), lastLoaded:0, xhr:null, hash:h };
    row.querySelector('.x').onclick = ()=>{ if (active.has(obj)) return; q = q.filter(e => e !== obj); queue.removeChild(row); };
    queue.appendChild(row); q.push(obj);
  }
  startUploads();
}

btnCancel.onclick = ()=>{
  if (!uploading) return;
  active.forEach(item => { try{ item.xhr && item.xhr.abort(); }catch{} });
  active.clear();
  q = [];
  uploading = false;
  setDisabled(false);
  btnCancel.disabled = true;
  toast('Upload canceled','err', 7000);
};

function setDisabled(d){
  btnBrowse.disabled = d; picker.disabled = d;
  btnDone.disabled = d;
  if (d) queue.classList.add('ghost'); else queue.classList.remove('ghost');
}

function startUploads(){
  if (uploading) return;
  uploading = true; setDisabled(true); btnCancel.disabled = false;
  pump();
}

function pump(){
  while (active.size < CONC && q.length){
    const item = q.shift();
    uploadOne(item);
  }
  if (active.size === 0 && q.length === 0){
    uploading = false; setDisabled(false); btnCancel.disabled = true;
  }
}

function uploadOne(item){
  active.add(item);
  const fd = new FormData();
  fd.append('files', item.file);
  fd.append('comments', commentsEl.value || '');

  const xhr = new XMLHttpRequest(); item.xhr = xhr;
  const bar = item.el.querySelector('.bar > div');
  const pct = item.el.querySelector('.pct');
  const spd = item.el.querySelector('.spd');
  const links = item.el.querySelector('.q-links');
  const copyBtn = item.el.querySelector('.copylink');

  xhr.open('POST','/api/upload', true);
  xhr.upload.onprogress = (e)=>{
    if (e.lengthComputable){
      const percent = Math.round((e.loaded/e.total)*100);
      bar.style.width = percent + '%'; pct.textContent = percent + '%';
      const now = Date.now(), dt = (now - item.lastT)/1000;
      if (dt > 0.2){ const speed = (e.loaded - item.lastLoaded) / dt; spd.textContent = human(speed) + '/s'; item.lastT = now; item.lastLoaded = e.loaded; }
    }
  };
  xhr.onreadystatechange = async ()=>{
    if (xhr.readyState===4){
      item.xhr = null;
      active.delete(item);
      if (xhr.status>=200 && xhr.status<300){
        try {
          const j = JSON.parse(xhr.responseText);
          if (j.ok && j.saved && j.saved.length){
            const id = j.saved[0].id;
            uploadedNames.add(item.file.name);
            if (item.hash) uploadedHashes.add(item.hash);
            links.style.display='flex';
            copyBtn.onclick = async ()=>{
              const r = await fetch('/api/getlink',{ method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ id })});
              const g = await r.json();
              if (g.ok){ await navigator.clipboard.writeText(g.directUrl); toast('Download Link Copied for ' + item.file.name, 'ok', 7000); }
            };
          }
        }catch{ spd.textContent = 'failed'; toast('Failed','err', 7000); }
      } else {
        spd.textContent = 'failed';
        let msg = 'Upload failed';
        try { const err = JSON.parse(xhr.responseText); if (err && err.error) msg = 'Upload failed: ' + err.error; } catch {}
        toast(msg,'err', 7000);
      }
      pump();
    }
  };
  xhr.send(fd);
}
</script>
</body>
</html>
