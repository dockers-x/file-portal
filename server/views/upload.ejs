<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Upload • <%= brandTitle %></title>
  <link rel="stylesheet" href="/static/styles.css"/>
  <% if (brandPrimary) { %><style>:root{ --primary:<%= brandPrimary %>; }</style><% } %>
  <style>
    .upload-grid{ display:grid; grid-template-columns: 1fr 1fr; gap:18px; }
    @media (max-width: 860px){ .upload-grid{ grid-template-columns: 1fr; } }
  </style>
</head>
<body>
  <div class="topbar">
    <div class="topbar-inner">
      <div class="topbar-title">
        <% if (brandLogo) { %><img src="<%= brandLogo %>" alt="logo"/><% } %>
        <span><%= brandTitle %></span>
      </div>
      <div>
        <a href="/logout"><button class="btn btn-signout small-compact">Sign Out</button></a>
      </div>
    </div>
  </div>

  <div class="container">
    <div class="card" style="max-width: 980px; position: relative;">
      <div style="display:flex; align-items:center; justify-content:space-between; margin-bottom:10px">
        <h2 style="margin:0">Upload Files</h2>
        <button id="btnDone" class="btn btn-primary">Done</button>
      </div>

      <div class="upload-grid">
        <div class="panel">
          <h3 style="margin-top:0">File Upload</h3>
          <div id="zone" class="dropzone" style="margin-top:8px">
            <p style="margin:0 0 4px 0">Drag and Drop Files</p>
            <p class="small" style="margin:0">Or</p>
            <div style="margin-top:8px">
              <button id="btnBrowse" class="btn btn-blue">Browse</button>
              <input id="picker" type="file" multiple style="display:none"/>
            </div>
          </div>
          <div style="margin-top:12px">
            <label class="small" for="comments">Comments (optional)</label>
            <textarea id="comments" placeholder="Optional comments" style="width:100%; min-height:80px; padding:10px; border:1px solid #d1d5db; border-radius:10px"></textarea>
          </div>
        </div>

        <div class="panel">
          <h3 style="margin-top:0">Uploading</h3>
          <div id="queue"></div>
          <div class="two-btns" style="margin-top:10px">
            <button id="btnCancel" class="btn btn-muted" disabled>Cancel</button>
          </div>
          <div id="hint" class="small" style="margin-top:8px; color:#6b7280">Uploads start automatically when you add files.</div>
        </div>
      </div>

      <div class="footer"><b><%= footerText %></b></div>
    </div>
  </div>

<script>
// Toast helper (light inline copy, not to conflict with dashboard)
function toast(msg, type='info'){
  let wrap = document.querySelector('.toast-wrap');
  if(!wrap){ wrap=document.createElement('div'); wrap.className='toast-wrap'; document.body.appendChild(wrap); }
  const t=document.createElement('div'); t.className='toast '+(type==='ok'?'ok':type==='err'?'err':'info'); t.textContent=msg;
  wrap.appendChild(t);
  setTimeout(()=>{ t.style.opacity='0'; t.style.transform='translateY(-4px)'; }, 2600);
  setTimeout(()=>{ wrap.removeChild(t); }, 3200);
}

const zone = document.getElementById('zone');
const picker = document.getElementById('picker');
const btnBrowse = document.getElementById('btnBrowse');
const btnCancel = document.getElementById('btnCancel');
const btnDone = document.getElementById('btnDone');
const queue = document.getElementById('queue');
const commentsEl = document.getElementById('comments');

btnDone.onclick = ()=>{ window.location.href='/dashboard'; };

let currentXhr = null;
let finishedByName = new Set(JSON.parse(sessionStorage.getItem('finishedByName') || '[]'));
let finishedByHash = new Set(JSON.parse(sessionStorage.getItem('finishedByHash') || '[]'));

btnBrowse.onclick = () => picker.click();
picker.onchange = () => handleFiles(Array.from(picker.files));

zone.ondragover = (e)=>{ e.preventDefault(); zone.style.filter='brightness(1.05)'; };
zone.ondragleave = ()=>{ zone.style.filter=''; };
zone.ondrop = (e)=>{ e.preventDefault(); zone.style.filter=''; handleFiles(Array.from(e.dataTransfer.files)); };

function human(n){ const u=['B','KB','MB','GB','TB']; let i=0,v=n; while(v>=1024 && i<u.length-1){ v/=1024; i++; } return (Math.round(v*10)/10)+' '+u[i]; }

function createWorker(){
  const code = \`
  self.onmessage = async (e) => {
    const file = e.data;
    const buf = await file.arrayBuffer();
    const hashBuf = await crypto.subtle.digest('SHA-256', buf);
    const bytes = new Uint8Array(hashBuf);
    let hex = ''; for (let b of bytes){ hex += b.toString(16).padStart(2, '0'); }
    postMessage(hex);
  };
  \`;
  const blob = new Blob([code], {type:'application/javascript'});
  return new Worker(URL.createObjectURL(blob));
}

let uploading = false;
async function handleFiles(files){
  if (!files.length) return;
  // Filter out duplicates by name already finished
  files = files.filter(f => !finishedByName.has(f.name));
  if (!files.length){ toast('All selected files already uploaded in this session','info'); return; }

  // For each file, compute SHA-256 and skip if content already uploaded
  const worker = createWorker();
  const hashes = await Promise.all(files.map(f => new Promise(res=>{
    worker.onmessage = (ev)=> res(ev.data);
    worker.postMessage(f);
  })));
  worker.terminate();
  const unique = [];
  for (let i=0;i<files.length;i++){
    if (finishedByHash.has(hashes[i])){
      toast('Skipped duplicate (same content): '+files[i].name, 'info');
    } else {
      files[i]._sha = hashes[i];
      unique.push(files[i]);
    }
  }
  if (!unique.length) return;

  // Enqueue UI rows and start uploads immediately, one by one
  for (const file of unique){
    const row = document.createElement('div');
    row.className='queue-item';
    row.innerHTML = \`
      <div class="queue-h">
        <div class="queue-name" title="\${file.name}">\${file.name}</div>
        <div class="q-actions"><span class="queue-meta">\${human(file.size)}</span></div>
      </div>
      <div class="bar"><div></div></div>
      <div class="queue-meta"><span class="pct">0%</span> • <span class="spd">0 KB/s</span></div>
      <div class="q-links" style="margin-top:6px; display:none; gap:6px">
        <button class="btn btn-muted small copylink">Copy Link</button>
      </div>\`;
    queue.appendChild(row);
    await uploadOne(file, row);
  }
}

async function uploadOne(file, row){
  uploading = true;
  btnCancel.disabled = false;
  const fd = new FormData();
  fd.append('files', file);
  fd.append('comments', commentsEl.value || '');

  const xhr = new XMLHttpRequest(); currentXhr = xhr;
  const bar = row.querySelector('.bar > div');
  const pct = row.querySelector('.pct');
  const spd = row.querySelector('.spd');
  const links = row.querySelector('.q-links');
  const copyBtn = row.querySelector('.copylink');

  let lastT = Date.now(), lastLoaded = 0;

  xhr.open('POST','/api/upload', true);
  xhr.upload.onprogress = (e)=>{
    if (e.lengthComputable){
      const percent = Math.round((e.loaded/e.total)*100);
      bar.style.width = percent + '%'; pct.textContent = percent + '%';
      const now = Date.now(), dt = (now - lastT)/1000;
      if (dt > 0.2){ const speed = (e.loaded - lastLoaded) / dt; spd.textContent = human(speed) + '/s'; lastT = now; lastLoaded = e.loaded; }
    }
  };
  await new Promise((resolve)=>{
    xhr.onreadystatechange = async ()=>{
      if (xhr.readyState===4){
        currentXhr = null;
        if (xhr.status>=200 && xhr.status<300){
          try{
            const j = JSON.parse(xhr.responseText);
            if (j.ok && j.saved && j.saved.length){
              const fileId = j.saved[0].id;
              links.style.display='flex';
              copyBtn.onclick = async ()=>{
                const r = await fetch('/api/getlink',{ method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ id: fileId })});
                const g = await r.json();
                if (g.ok){ await navigator.clipboard.writeText(g.directUrl); toast('Link copied','ok'); }
              };
              finishedByName.add(file.name);
              if (file._sha) finishedByHash.add(file._sha);
              sessionStorage.setItem('finishedByName', JSON.stringify(Array.from(finishedByName)));
              sessionStorage.setItem('finishedByHash', JSON.stringify(Array.from(finishedByHash)));
            }
          }catch{}
        } else {
          spd.textContent = 'failed'; toast('Upload failed','err');
        }
        resolve(true);
      }
    };
    xhr.send(fd);
  });
  uploading = false;
  btnCancel.disabled = true;
}

btnCancel.onclick = ()=>{
  if (currentXhr){ currentXhr.abort(); toast('Canceled','info'); }
};
</script>
</body>
</html>
